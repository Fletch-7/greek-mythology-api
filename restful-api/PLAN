HOMEWORK PART 1/2

Steps to follow for tonight’s homework:
- Install packages
install any required packages (if you are not sure check your classwork's package json for the dependencies you'll need) DONE

- config/environment.js
Set up the file (do look up how we did it in class you’re not expected to know the syntax for this) DONE
call your database whatever you want your collection to be called

- index.js
require express, port - get the app running first (console.log). Check everything is working using $ yarn start DONE


- index.js
Set up mongoose, databaseURI - make sure this connects. If they both work don’t forget to add your body-parser next. DONE 


- logger
Set up the logger file.  DONE


- index.js 
import the logger and check everything is working (don’t worry about the router yet) DONE


- models
don’t forget to require mongoose!
Make the schema (and model), keep it simple! DONE


- db/ seeds.js
Make seeds file and test that it builds (3 seeds is enough)
Don’t forget to import your model. 
Add the 'seed' script in your package.json (check the classwork's package json;  DONE
Don’t forget to run this command for the seeds to be added to the DB:      
$ yarn seed 


- router & controllers 
Make routes and each controller - INDEX and CREATE are required,  DONE
SHOW, UPDATE, DELETE are bonus
Only write one route at one time and test in insomnia in between. 


- index.js
don’t forget to import the router!  DONE
---


The file structure should look like this:
-> config
   — environment.js 
   — router.js 
-> controllers
   — js file for your controllers
-> db
   — seeds.js
-> models
   — js file for your models
-> index.js

________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________
HOMEWORK PART 2/2

Authentication Lab


Don't forget to install bcrypt & jsonwebtoken                                       DONE

1. Create the user model
- Build out the basic model
- Set up the virtual field for passwordConfirmation (watch the spelling)            DONE


2. Set up the user methods
- .pre('validate') to check for match between password and passwordConfirmation     DONE
- .pre('save') to hash password using bcrypt before saving to db
- Don't add the validatePassword yet.
- Export User model


3. Make auth controllers
- Make the register function
- Hook up the route for register and TEST!                                          DONE
- If you are getting 'module' missing errors it's likely that there's an issue with your importing and exporting
- Make the login function


4. Validation
- Add secret to `config/environment.js` and require it                              DONE
- Remember to make `validatePassword()` in the user model                       
- Hook up the route for login and TEST!


5. Make a secureRoute folder in lib
- Make a `secureRoute()` function                                                   DONE
- Check to see if a token exists
- Check if token is valid


6. Import secure route to routes and add it to any routes that should be secure. Leave this as the last step so that testing can be easier
Collapse

DONE













